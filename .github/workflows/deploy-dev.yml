name: Deploy - Development

on:
  workflow_run:
    workflows: ["CI - Tests"]
    branches: [dev]
    types:
      - completed
  workflow_dispatch:  # for manual testing

jobs:
  deploy-frontend-dev:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Debug AWS Account ID
        run: |
          echo "AWS Account ID: ${{ vars.AWS_ACCOUNT_ID_DEV }}"
          echo "Expected ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_DEV }}:role/github-actions-dev"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID_DEV }}:role/github-actions-dev
          role-session-name: github-actions-dev-deployment
          aws-region: us-east-1

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install

      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm run build

      - name: Deploy frontend to S3
        working-directory: ./frontend
        run: |
          aws s3 sync ./build s3://choregarden-frontend-dev --delete

      - name: Update frontend config
        run: |
          # Get required values from AWS
          API_URL=$(aws apigatewayv2 get-apis --query 'Items[?contains(Name, `choregarden-dev`)].ApiEndpoint' --output text)
          
          # Get Cognito User Pool ID and details
          USER_POOL_ID=$(aws cognito-idp list-user-pools --max-items 50 --query 'UserPools[?contains(Name, `choregarden-dev`)].Id' --output text)
          
          if [ -n "$USER_POOL_ID" ]; then
            COGNITO_CLIENT_ID=$(aws cognito-idp list-user-pool-clients --user-pool-id "$USER_POOL_ID" --query 'UserPoolClients[0].ClientId' --output text)
            
            # Get the custom domain if it exists
            CUSTOM_DOMAIN=$(aws cognito-idp describe-user-pool --user-pool-id "$USER_POOL_ID" --query 'UserPool.CustomDomain' --output text 2>/dev/null || echo "None")
            
            if [ "$CUSTOM_DOMAIN" != "None" ] && [ -n "$CUSTOM_DOMAIN" ]; then
              COGNITO_DOMAIN="$CUSTOM_DOMAIN"
            else
              # Use the default Cognito domain format
              DOMAIN_PREFIX=$(aws cognito-idp describe-user-pool-domain --domain-name "choregarden-dev-$(echo $USER_POOL_ID | cut -d'_' -f2 | tr '[:upper:]' '[:lower:]')" --query 'DomainDescription.Domain' --output text 2>/dev/null || echo "choregarden-dev-$(echo $USER_POOL_ID | cut -d'_' -f2 | tr '[:upper:]' '[:lower:]')")
              COGNITO_DOMAIN="${DOMAIN_PREFIX}.auth.us-east-1.amazoncognito.com"
            fi
          fi
          
          # Create config.json with flat structure
          cat > config.json << EOF
          {
            "REACT_APP_API_BASE_URL": "$API_URL",
            "COGNITO_CLIENT_ID": "$COGNITO_CLIENT_ID",
            "COGNITO_DOMAIN": "$COGNITO_DOMAIN"
          }
          EOF
          
          echo "Generated config.json:"
          cat config.json
          
          # Upload to S3
          aws s3 cp config.json s3://choregarden-frontend-dev/config.json

  deploy-backend-dev:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    
    steps:
      - name: Placeholder - Backend Dev Deployment
        run: |
          echo "Backend dev deployment would run here"
          echo "Target: Dev environment"

  deploy-db-dev:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    
    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout
    
    steps:
      - name: Placeholder - Database Dev Deployment
        run: |
          echo "Database dev deployment (migrations) would run here"
          echo "Target: Dev environment"
