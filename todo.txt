latest done:
* setting up github OIDC for my deployments
* deploy FE via ci-cd (to dev environment)

in progress:
* make FE deploy trigger only when there are changes in the /frontend folder tree
* deploy BE via ci-cd (to dev environment)

next steps:
* iron out CI/CD for deployments & Terraform
* * deploy BE via ci-cd (to dev environment)
* * DB change deployment and migration via CI-CD (to dev environment)
* * op lambdas deployments

longer term:
* add documentation for manual deployments (FE, BE, DB, infra, ops lambdas)
* add doc steps for local db cert set up
* add doc steps for DBeaver connection to deployed DB
* document additional thougths about schema (chore templates, chore template groups, garden templates, etc.)
* give the frontend and backend tests some teeth - there's enough there at this point that actual tests would be useful
* think about stripping out Tailwind - the more I think about it and work with it the less I like it; replace with an actual design framework, or just hand-roll the CSS (AI assistance makes this a viable approach)
* the backend is making DB queries directly with SQL - think about whether this is a decent approach for this case or whether it'd be better to use some sort of ORM
* do a dev rollback (FE, BE, DB)
* implement / set up a prod environment
* do a prod deploy
* do a prod rollback (FE, BE, DB)
* create/implement invite-a-friend
* tackle integration tests on dev deployment
* tackle POC for job processing (chore growth) - just get something to run and touch the DB, no real functionality yet
* POC for messaging and/or events
* integration with some feature flagging system / service (must have a free level)
* integration with some payment processor system / service (must have a free level)
* replace the authentication hosted UI with an app-specific one (still use Cognito under the hood); MAYBE just style the hosted UI... but probably better to just own it within the app
* create more development playbooks (more in frontend, and beyond just frontend)

FE future considerations:
- **State Management**: Consider Redux Toolkit or Zustand for complex state
- **Data Fetching**: Add React Query for better server state management
- **TypeScript**: Migrate to TypeScript for better type safety
- **Testing**: Add comprehensive unit and integration tests
- **Performance**: Add code splitting and lazy loading for larger apps

tweaks & issues:
* on logging in, the log in button is still shown for a bit before the logged-in version of the header is shown, leading to an odd flicker experience


docs/wiki/README
* development tooling set up
* AWS set up- basic org & account, initial terraform gotchas (set secrets, create ecr registries, etc.)
* running things locally using docker
* general workflow for FE update/deployment, and also BE and DB
* details of CI/CD flow
* architecture diagram
* scaling handles / levers
* logs & monitors
